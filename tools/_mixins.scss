/*
|--------------------------------------------------------------------------
| $MIXINS
|--------------------------------------------------------------------------
*/


/**
 * Provide rgba and rgb rules for `$property` using `$rgb` and `$opacity`
 *
 * @example scss
 * rgba(color, rgb(51, 51, 51), 0.8);
 *
 * @example scss
 * rgba(color, #bada55, 0.8);
 *
 * @param {string}  $property
 * @param {rgb|hex} $rgb
 * @param {float}   $opacity
 *
 * @requires {function} splitrgb
 */

@mixin rgba($property, $rgb, $opacity) {
    $splitrgb: splitrgb($rgb);

    #{$property}: rgb(map-get($splitrgb, "red"), map-get($splitrgb, "green"), map-get($splitrgb, "blue"));
    #{$property}: rgba($rgb, $opacity);
}





/**
 * Provide REM and PX rules for `$property` using `$values`
 *
 * @example scss
 * include rem(font-size, 16px);
 *
 * @example scss
 * include rem(font-size, 2rem);
 *
 * @param {string} $property
 * @param {mixed}  $values
 */

@mixin rem($property, $values) {
    // Create a couple of empty lists for output
    $px-values: ();
    $rem-values: ();

    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if $value == 0 or $value == 0px {
            // 0 -- use it without a unit
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
            // px value given - calculate rem value from font-size
            $new-rem-value: $value / $base-font-size;
            $px-values: join($px-values, round($value));
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == rem) {
            // rem value given - calculate px value from font-size
            $new-px-value: strip-unit($value) * $base-font-size;
            $px-values: join($px-values, #{$new-px-value});
            $rem-values: join($rem-values, $value);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
            // % value given - don't add px or rem
            $px-values: join($px-values, #{$value});
            $rem-values: join($rem-values, #{$value});
        } @else if $value == auto {
            // auto - don't add px or rem
            $px-values: join($px-values, auto);
            $rem-values: join($rem-values, auto);
        } @else if $value == !important {
            // !important - don't add px or rem
            $px-values: join($px-values, !important);
            $rem-values: join($rem-values, !important);
        } @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $px-values: join($px-values, round($value * $base-font-size));
            $rem-values: join($rem-values, #{$value}rem);
        }
    }

    #{$property}: $px-values;
    #{$property}: $rem-values;
}





/**
 * Setup width classes using `$namespace` for prefixing
 *
 * @exampel scss
 * include grid-setup('mobile-');
 *
 * @param {string} $namespace
 *
 * @link http://bit.ly/1gTnXVA Credit to Harry Roberts
 */

@mixin grid-setup($namespace: "") {
    /**
    * Whole
    */
    .#{$namespace}one-whole         { width: 100%; }


    /**
    * Halves
    */
    .#{$namespace}one-half          { width: 50%; }


    /**
    * Thirds
    */
    .#{$namespace}one-third         { width: 33.333%; }
    .#{$namespace}two-thirds        { width: 66.666%; }


    /**
    * Quarters
    */
    .#{$namespace}one-quarter       { width: 25%; }
    .#{$namespace}two-quarters      { @extend .#{$namespace}one-half; }
    .#{$namespace}three-quarters    { width: 75%; }


    /**
    * Fifths
    */
    .#{$namespace}one-fifth         { width: 20%; }
    .#{$namespace}two-fifths        { width: 40%; }
    .#{$namespace}three-fifths      { width: 60%; }
    .#{$namespace}four-fifths       { width: 80%; }


    /**
    * Sixths
    */
    .#{$namespace}one-sixth         { width: 16.666%; }
    .#{$namespace}two-sixths        { @extend .#{$namespace}one-third; }
    .#{$namespace}three-sixths      { @extend .#{$namespace}one-half; }
    .#{$namespace}four-sixths       { @extend .#{$namespace}two-thirds; }
    .#{$namespace}five-sixths       { width: 83.333%; }


    /**
    * Eighths
    */
    .#{$namespace}one-eighth        { width: 12.5%; }
    .#{$namespace}two-eighths       { @extend .#{$namespace}one-quarter; }
    .#{$namespace}three-eighths     { width: 37.5%; }
    .#{$namespace}four-eighths      { @extend .#{$namespace}one-half; }
    .#{$namespace}five-eighths      { width: 62.5%; }
    .#{$namespace}six-eighths       { @extend .#{$namespace}three-quarters; }
    .#{$namespace}seven-eighths     { width: 87.5%; }


    /**
    * Tenths
    */
    .#{$namespace}one-tenth         { width: 10%; }
    .#{$namespace}two-tenths        { @extend .#{$namespace}one-fifth; }
    .#{$namespace}three-tenths      { width: 30%; }
    .#{$namespace}four-tenths       { @extend .#{$namespace}two-fifths; }
    .#{$namespace}five-tenths       { @extend .#{$namespace}one-half; }
    .#{$namespace}six-tenths        { @extend .#{$namespace}three-fifths; }
    .#{$namespace}seven-tenths      { width: 70%; }
    .#{$namespace}eight-tenths      { @extend .#{$namespace}four-fifths; }
    .#{$namespace}nine-tenths       { width: 90%; }


    /**
    * Twelfths
    */
    .#{$namespace}one-twelfth       { width: 8.333%; }
    .#{$namespace}two-twelfths      { @extend .#{$namespace}one-sixth; }
    .#{$namespace}three-twelfths    { @extend .#{$namespace}one-quarter; }
    .#{$namespace}four-twelfths     { @extend .#{$namespace}one-third; }
    .#{$namespace}five-twelfths     { width: 41.666% }
    .#{$namespace}six-twelfths      { @extend .#{$namespace}one-half; }
    .#{$namespace}seven-twelfths    { width: 58.333%; }
    .#{$namespace}eight-twelfths    { @extend .#{$namespace}two-thirds; }
    .#{$namespace}nine-twelfths     { @extend .#{$namespace}three-quarters; }
    .#{$namespace}ten-twelfths      { @extend .#{$namespace}five-sixths; }
    .#{$namespace}eleven-twelfths   { width: 91.666%; }
}





/**
 * Mixin to setup our headings using `$type-scale`
 *
 * @example scss
 * include type();
 *
 * @example scss
 * include type(1.25);
 *
 * @param {float} $type-scale ($base-type-scale)
 *
 * @requires {mixin} rem
 */

@mixin type($type-scale: $base-type-scale) {
    $h4-size: round($base-font-size * $type-scale);
    $h3-size: round($h4-size * $type-scale);
    $h2-size: round($h3-size * $type-scale);
    $h1-size: round($h2-size * $type-scale);

    h1,
    .h1,
    %h1 {
        @include rem(font-size, $h1-size);
    }

    h2,
    .h2,
    %h2 {
        @include rem(font-size, $h2-size);
    }

    h3,
    .h3,
    %h3 {
        @include rem(font-size, $h3-size);
    }

    h4,
    .h4,
    %h4 {
        @include rem(font-size, $h4-size);
    }
}
