/*
|--------------------------------------------------------------------------
| $TOOLS.MIXINS
|--------------------------------------------------------------------------
*/


/**
 * Provide rgba and rgb rules for `$property` using `$rgb` and `$opacity`
 *
 * @example scss
 * rgba(color, rgb(51, 51, 51), 0.8);
 *
 * @example scss
 * rgba(color, #bada55, 0.8);
 *
 * @param {string}  $property
 * @param {rgb|hex} $colour
 * @param {float}   $opacity
 *
 * @requires {function} splitrgb
 */
@mixin rgba($property, $colour, $opacity) {
    $colour: split-into-rgb($colour);

    #{$property}: rgb(map-get($colour, "red"), map-get($colour, "green"), map-get($colour, "blue"));
    #{$property}: rgba($colour, $opacity);
}





/**
 * Provide REM and PX rules for `$property` using `$values`
 *
 * @example scss
 * include rem(font-size, 16px);
 *
 * @example scss
 * include rem(font-size, 2rem);
 *
 * @param {string} $property
 * @param {mixed}  $values
 */
@mixin rem($property, $values) {
    // Create a couple of empty lists for output
    $px-values: ();
    $rem-values: ();

    @each $value in $values {
        /**
         * For each property value, if it's in rem or px, derive both rem and
         * px values for it and add those to the end of the appropriate buffer.
         * Ensure all pixel values are rounded to the nearest pixel.
         */

        $unit: unit($value);
        $unitless-value: strip-unit($value);

        @if ($unitless-value == 0) {
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        } @else if (type-of($value) == number and not unitless($value)) {
            @if ($unit == px) {
                $px-values: join($px-values, round($value));
                $rem-values: join($rem-values, rem($value));
            } @else if ($unit == rem) {
                $new-px-value: $unitless-value * $base-font-size;

                $px-values: join($px-values, #{$new-px-value});
                $rem-values: join($rem-values, $value);
            } @else {
                $px-values: join($px-values, #{$value});
                $rem-values: join($rem-values, #{$value});
            }
        }
    }

    #{$property}: $px-values;
    #{$property}: $rem-values;
}





/**
 * Setup width classes using optional namespace prefix
 *
 * @example scss
 * include grid-setup('mobile-');
 *
 * @param {string} $namespace
 *
 * @link http://bit.ly/1gTnXVA
 */
@mixin grid-setup($namespace: '') {
    /**
    * Whole
    */
    .u-#{$namespace}one-whole         { width: 100%; }


    /**
    * Halves
    */
    .u-#{$namespace}one-half          { width: 50%; }


    /**
    * Thirds
    */
    .u-#{$namespace}one-third         { width: 33.333333%; }
    .u-#{$namespace}two-thirds        { width: 66.666666%; }


    /**
    * Quarters
    */
    .u-#{$namespace}one-quarter       { width: 25%; }
    .u-#{$namespace}two-quarters      { @extend .u-#{$namespace}one-half; }
    .u-#{$namespace}three-quarters    { width: 75%; }


    /**
    * Fifths
    */
    .u-#{$namespace}one-fifth         { width: 20%; }
    .u-#{$namespace}two-fifths        { width: 40%; }
    .u-#{$namespace}three-fifths      { width: 60%; }
    .u-#{$namespace}four-fifths       { width: 80%; }


    /**
    * Sixths
    */
    .u-#{$namespace}one-sixth         { width: 16.666666%; }
    .u-#{$namespace}two-sixths        { @extend .u-#{$namespace}one-third; }
    .u-#{$namespace}three-sixths      { @extend .u-#{$namespace}one-half; }
    .u-#{$namespace}four-sixths       { @extend .u-#{$namespace}two-thirds; }
    .u-#{$namespace}five-sixths       { width: 83.333333%; }


    /**
    * Eighths
    */
    .u-#{$namespace}one-eighth        { width: 12.5%; }
    .u-#{$namespace}two-eighths       { @extend .u-#{$namespace}one-quarter; }
    .u-#{$namespace}three-eighths     { width: 37.5%; }
    .u-#{$namespace}four-eighths      { @extend .u-#{$namespace}one-half; }
    .u-#{$namespace}five-eighths      { width: 62.5%; }
    .u-#{$namespace}six-eighths       { @extend .u-#{$namespace}three-quarters; }
    .u-#{$namespace}seven-eighths     { width: 87.5%; }


    /**
    * Tenths
    */
    .u-#{$namespace}one-tenth         { width: 10%; }
    .u-#{$namespace}two-tenths        { @extend .u-#{$namespace}one-fifth; }
    .u-#{$namespace}three-tenths      { width: 30%; }
    .u-#{$namespace}four-tenths       { @extend .u-#{$namespace}two-fifths; }
    .u-#{$namespace}five-tenths       { @extend .u-#{$namespace}one-half; }
    .u-#{$namespace}six-tenths        { @extend .u-#{$namespace}three-fifths; }
    .u-#{$namespace}seven-tenths      { width: 70%; }
    .u-#{$namespace}eight-tenths      { @extend .u-#{$namespace}four-fifths; }
    .u-#{$namespace}nine-tenths       { width: 90%; }


    /**
    * Twelfths
    */
    .u-#{$namespace}one-twelfth       { width: 8.333333%; }
    .u-#{$namespace}two-twelfths      { @extend .u-#{$namespace}one-sixth; }
    .u-#{$namespace}three-twelfths    { @extend .u-#{$namespace}one-quarter; }
    .u-#{$namespace}four-twelfths     { @extend .u-#{$namespace}one-third; }
    .u-#{$namespace}five-twelfths     { width: 41.666666% }
    .u-#{$namespace}six-twelfths      { @extend .u-#{$namespace}one-half; }
    .u-#{$namespace}seven-twelfths    { width: 58.333333%; }
    .u-#{$namespace}eight-twelfths    { @extend .u-#{$namespace}two-thirds; }
    .u-#{$namespace}nine-twelfths     { @extend .u-#{$namespace}three-quarters; }
    .u-#{$namespace}ten-twelfths      { @extend .u-#{$namespace}five-sixths; }
    .u-#{$namespace}eleven-twelfths   { width: 91.666666%; }
}





/**
 * Mixin to setup our headings using the set type scale
 *
 * @example scss
 * include type();
 *
 * @example scss
 * include type(1.25);
 *
 * @param {float} $type-scale ($base-type-scale)
 *
 * @requires {mixin} rem
 */
@mixin type($type-scale: $base-type-scale) {
    $h4-size: round($base-font-size * $type-scale);
    $h3-size: round($h4-size * $type-scale);
    $h2-size: round($h3-size * $type-scale);
    $h1-size: round($h2-size * $type-scale);

    h1, .u-h1 {
        @include rem(font-size, $h1-size);
    }

    h2, .u-h2 {
        @include rem(font-size, $h2-size);
    }

    h3, .u-h3 {
        @include rem(font-size, $h3-size);
    }

    h4, .u-h4 {
        @include rem(font-size, $h4-size);
    }
}





/**
 * Force text to truncate at a specified width
 *
 * @example scss
 * include truncate(100%);
 *
 * @param {mixed} $boundary (100%)
 */
@mixin truncate($boundary: 100%){
    max-width: $boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}





/**
 * Apply clearfix to an element
 */
@mixin clearfix() {
    /**
     * Contain floats within an element
     *
     * @link http://nicolasgallagher.com/micro-clearfix-hack/
     *
     * 1. The space content is one way to avoid an Opera bug when the
     *    contenteditable attribute is included anywhere else in the document.
     *    Otherwise it causes space to appear at the top and bottom of elements
     *    that are clearfixed.
     * 2. The use of 'table' rather than 'block' is only necessary if using
     *    ':before' to contain the top-margins of child elements.
     */
    &:before,
    &:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }

    &:after {
        clear: both;
    }
}





/**
 * Generate styles for hover and focus in one go
 */
@mixin hocus() {

    &:hover,
    &:focus {
        @content;
    }
}
